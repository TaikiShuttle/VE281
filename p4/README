Implement a shortest path problem considering:
1. May contain a negetive edge
2. May contain a negative loop

Some algorithms can be used:
1. Dijkstra (first add all edges to positive?)
2. Bellman-Ford (efficient for sparse graph but slow for dense graph)
3. Floyd (efficient for dense graph but slow for sparse graph)
4. FSPA (based on Bellman-Ford, uses a queue to optimize)

The testcases are all dense graphs, which makes Floyd a better choice.

Abour Honor Code:
Student taking VE281 in JI can refer to this code, but he or she should not copy or modify it directly. And the code for this project is actually performing poorly!
You can come up with a better one yourself! If the JI Honor council spots a copy behavior, it is not author's resposibility for other students' behavior.
